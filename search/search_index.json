{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Kaleido Fansubbing Management Guide","text":"<p>This guide aims to provide a comprehensive introduction to many useful aspects of modern-day fansubbing. It is designed to help both new and experienced fansubbers leverage best-practices, how to create a project, basic management tooling and skills, and so on.</p>"},{"location":"#who-should-use-this-guide","title":"Who Should Use This Guide?","text":"<p>This guide is intended for anyone involved in fansubbing, including translators, timers, typesetters, editors, song stylers, and quality checkers. Whether you are new or looking to improve your existing workflow, this guide will provide the knowledge and tools you need to manage your fansubbing projects effectively.</p> <p>Warning</p> <p>This guide is NOT a guide on how to fansub, but on how to manage and run a project! There are many other resources online to learn basics for translation, typesetting, encoding, etc. so please refer to those instead!</p>"},{"location":"#topics","title":"Topics","text":"<p>This guide touches upon the following topics:</p> <pre><code>1. Git\n    1. Setup\n        - Installing the Github Desktop client and other useful tooling\n        - Creating and configuring Github repositories\n        - Cloning a Github repository\n\n    2. Usage\n        - Committing, pulling/pushing, changing branches, etc.\n        - Pull requests and branching\n        - Resolving merge conflicts\n        - Keeping your repository clean\n\n2. ASS files\n    1. Setup\n        - Installing the latest Aegisub version\n        - Splitting up files\n        - Configuration\n\n3. Discord integration\n    1. Webhooks\n        - Github\n\n    2. Nino\n        - Setup and further configuration\n        - Linking a project channel with a public channel\n\n4. Staff\n    1. Recruitment\n        - Recruitment channels and forums\n        - Testing applicants\n</code></pre>"},{"location":"git/setup/","title":"Setting up Git","text":"<p>Warning</p> <p>This guide assumes the reader to be a Windows user, however most of the information found here can still be used Linux/MacOS users, as well as users who prefer to use git directly through the terminal.</p> <p>When working in a group, you'll often find multiple people making changes to the same or multiple files. The Translator will need a place to upload their translation to, the typesetter(s) may need a place where they can upload their typesetting, etc.</p> <p>For this kind of operation, a git environment is preferable. With git you can very easily do version control, allowing you to see who made changes to what files and when, and also create an easy place to find all the relevant files and their contents without requiring users to blindly download files to edit them the same way they would when working in an FTP setup.</p>"},{"location":"git/setup/#using-the-kaleido-project-template","title":"Using the Kaleido project template","text":"<p>Most projects are structured the same or very similarly. Because of this, we at Kaleido have created our own project template. This template is updated regularly.</p> <p>You can use this template by pressing this button in the top-right corner of the page:</p> <p></p> <p>This will open the following page:</p> <p></p> <p>Give your repository a name, create it under your own username or an organisation you have writing to, and decide whether to make the repository public or private. You can then create the repository by clicking the \"Create repository\" button.</p> <p></p>"},{"location":"git/setup/#adding-users","title":"Adding users","text":"<p>If you're working with multiple people, you'll want to make sure to give them access to the repository. To do this, navigate to the repository's settings, and then click on \"Collaborators\".</p> <p></p> <p>Here you can manage what users (and teams in an organization) have access to in your repository. When inviting project staff, make sure to give them writing access.</p>"},{"location":"git/setup/#basic-actions","title":"Basic actions","text":"<p>If you are new to Git and GitHub, it's recommended to use the GitHub Desktop client. This guide was written under the assumption that most readers will be using this client.</p>"},{"location":"git/setup/#cloning","title":"Cloning","text":"<p>After installing the desktop client, open it and log in. Now you need to add the repository to your system. You can do this by going to <code>File &gt; Clone repository</code>, or by opening the repository in your browser and going to <code>Code &gt; Open with GitHub Desktop</code>.</p> <p></p>"},{"location":"git/setup/#syncing-file-changes","title":"Syncing file changes","text":"<p>When editing files from a git repository, git will remember and verify what files have been changed. Before making any commits however, you\u2019ll want to first double-check that you have every file pulled to your local repository. Click \"Fetch origin\" at the top, and pull in any newly-pushed commits made by other users.</p> <p>Now you can verify your own changes and commit the files you want to upload/update in the repository. The desktop client will additionally give you a very useful display of what is different between your file and the latest version of the file you pulled in from the repository.</p> <p>To make things easier for your teammates, you\u2019ll want to make sure to give your commit a helpful title, as well as a description if necessary. An example of a helpful commit title would be an episode number and what you did in the commit. For example, <code>03: Typeset train sign</code> or <code>08: Edited Part A</code>. The description can contain more detailed information, like what exactly was changed (if multiple things were changed), what problems you ran across along the way, etc.</p> <p></p>"}]}